Technical documentation
=========================


This section targets people who wish to know more about how our [**Classroom Conference WebApp**](http://tweb-project3-jollien-ngo.herokuapp.com/ "Go to the web application on Heroku") works inside, including software developers who wish to contribute to its development, or users who want to investigate a problem with our wepapp in greater depth. (If you are only looking for information on how to download and run the app localy, see the [End-user documentation page](https://github.com/schodaw/TWEB-Project1/blob/master/README.md "End-user documentation page (on Github)") instead.)

------------

# Summary

[**Frameworks and Libraries**](#Frameworks_and_Libraries)

[*.....Scaffolding and Pipelining*](#Scaffolding_and_Pipelining)

[..........Yo](#Yo)

[..........Grunt.js](#Grunt.js)

[*.....Frontend*](#Frontend)

[..........Bower](#Bower)

[..........Bootstrap](#Bootstrap)

[..........AngularJS](#AngularJS)

[](#)

[](#)

[](#)


------------

# Frameworks and Libraries <a id="Frameworks_and_Libraries"></a>

## Scaffolding and Pipelining <a id="Scaffolding_and_Pipelining"></a>

At the beginning, we start our project from scratch and generate an application skeleton. In order to setup a complete, automated, efficient and reliable development workflow, we will use **Yo** and **Grunt**. 

### Yo <a id="Yo"></a>

**Yo** is a tool for generating project skeletons (scaffolding), and we use the **AngularJS Full-Stack** generator like framework. 

Runs the generator and sets up a new AngularJS + Express app : 

	yo angular-fullstack twebProject1App

Generates a new API endpoint :

	yo angular-fullstack:endpoint chat
	yo angular-fullstack:endpoint lecture
	yo angular-fullstack:endpoint lectureModel


Generates a new route :

	yo angular-fullstack:route giveLecture
	yo angular-fullstack:route attendLecture


### Grunt.js <a id="Grunt.js"></a>

**Grunt.js** is a JavaScript based task runner and using JSON for configuration. It is used to automate repetitive tasks in our development workflow. We use it to automate tasks like compilation, versioning, testing, deploying etc. 


For preview the app on local machine : 

	grunt server

For building in the `dist` folder  : 

	grunt build

Commit and push the resulting build to heroku, :

	grunt buildcontrol:heroku


## Frontend <a id="Frontend"></a>

### Bower <a id="Bower"></a>

**Bower** is a tool for managing web dependencies for the front-end : frameworks, libraries, assets and utilities. Bower uses a flat dependency tree, requiring only one version for each package, reducing page load to a minimum. It works by fetching and installing packages, taking care of finding and downloading. Bower keeps track of these packages in a manifest file `bower.json`

Install packages to the folder `bower_components` and update the file `bower.json`:

	bower install [component-name] --save

or install all packages from the files `bower.json` : 

	bower install


Example of dependencies :

	{
	  "name": "tweb-project1",
	  "version": "0.0.0",
	  "dependencies": {
	    "angular": ">=1.2.*",
	    "json3": "~3.3.1",
	    "es5-shim": "~3.0.1",
	    "jquery": "~1.11.0",
	    "bootstrap": "~3.1.1",
		 ...
	    "angular-socket-io": "~0.6.0",
	    "angular-ui-router": "~0.2.10",
	    "pdfjs-dist": "~1.0.931",	    
	    "aws-sdk-js": "~2.1.2"
	  },
	  "devDependencies": {
	    "angular-mocks": ">=1.2.*",
	    "angular-scenario": ">=1.2.*"
	  }
	}

A version can be :
- semver version : `1.2.3`
- version range : `>=1.2.`, `~2.1.2`

### Bootstrap <a id="Bootstrap"></a>

**Bootstrap** is the most popular HTML, CSS and Javascript framework for developing faster and easier front-end web project. It is a free collection of HTML and CSS-based design templates for typography, forms, buttons, navigation and other interface components. Using the system of layout grid, Bootstrap scales our web application by resizing differents components according to the percentages of space occupied. It totally supports  responsive web design for laptops, tablets or mobile phones. 

An example of a simple form and a button, wrapped by two columns and a row :
	
	<div class="row">
	  <div class="col-lg-12">
	    <h1>Join a lecture</h1>
	    <p>The lecture code is displayed in the upper-right corner of the page displaying a lecture currently given by a teacher</p>
	  </div>
	  <div class="col-sm-6">
	    <form class="thing-form">
	      <p class="input-group">
	        <input type="text" placeholder="Type the lecture code given by the teacher" ng-model="lecture.userFriendlyId" class="form-control"/><span class="input-group-btn">
	          <button type="submit" ng-click="joinLecture()" class="btn btn-primary">Join</button></span>
	      </p>
	    </form>
	  </div>
	</div>		


### AngularJS <a id="AngularJS"></a>

**AngularJS** is an open-source web application framework for client-side model-view-controller which allows to develop single-page application. It works by reading the HTML page, which has embedded into it additional tag attributes. Those attributes are interpreted as directives telling Angular to bind input or output parts of the page to a model that is represented by JavaScript variables.

An example of the directive `ng-repeat` and the variable `chat` :

With `$scope`, we can expose data and function to our view :

`giveLecture.controller.js`

	$scope.chatMessages = [];

    //get chat messages of lecture
    $http.get('/api/lectures/' + $scope.lectureId + '/chats').success(function(chatMessages) {
        $scope.chatMessages = chatMessages;
        //live syncronization of chat messages 
        socket.syncUpdates('chat', $scope.chatMessages, function(event, item, object) {
            $scope.chatMessages = object.filter(function(chat) {return chat.lectureId == $scope.lectureId;});
        });
    });

In the view, we use the **directive** `ng-repeat` and **variable** `chat` to refer to the scope : 

`giveLecture.jade`

	hr
	.col-md-1.col-centered.col1on3 {{chat.time}}
	.col-md-1.col-centered.col2on3 {{chat.author}}
	.col-md-1.col-centered.col3on3 {{chat.content}} 
	
The binding is two-ways.


